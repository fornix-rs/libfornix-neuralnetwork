/// An activation function is required to transform outputs from an neuron.
/// Without an activation function the outputs would just increase after each layer.
pub trait ActivationFunction {
    /// Activates a vector of values.
    /// Returns a new vector!
    ///
    /// `inputs` - vector of values that need to 'activated'
    fn activate(inputs: Vec<f64>) -> Vec<f64>;
}

/// Creates a simple activation function
/// A simple activation function is a function that directly translates inputs to outputs within on expression per input
macro_rules! simple_activation {
    ($name:ident, $expression:expr) => {
        #[doc="Autogenerated activation function out of a single expression. See definition for details"]
        pub struct $name;

        impl ActivationFunction for $name {
            fn activate(inputs: Vec<f64>) -> Vec<f64> {
                let mut outputs = Vec::<f64>::new();

                for x in inputs {
                    outputs.push($expression(x));
                }

                return outputs;
            }
        }
    }
}

simple_activation! (ArcTanActivation, | x: f64 | -> f64 { x.atan() });
simple_activation! (TanHActivation, | x: f64 | -> f64 { x.tanh() });
simple_activation! (TanActivation, | x: f64 | -> f64 { x.tan() });
simple_activation! (SinActivation, | x: f64 | -> f64 { x.sin() });
